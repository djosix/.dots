#!/usr/bin/env python3

import argparse
import re
from datetime import datetime, timezone, timedelta, UTC

try:
    from dateutil.parser import parse as parse_date
except:
    import sys
    print('error: python3 -m pip install python-dateutil', file=sys.stderr)
    sys.exit(1)


def get_args():
    parser = argparse.ArgumentParser(__name__)
    parser.add_argument('input',
                        metavar='INPUT',
                        nargs='?',
                        default=datetime.now().isoformat(),
                        help='any date and time string')
    parser.add_argument('--timezone', '-z',
                        type=int,
                        default=None,
                        help='output timezone specified as an integer')
    parser.add_argument('--output', '-o',
                        choices=('int', 'rfc3339', 'iso8601', 'compact'),
                        default='int',
                        help='output format')
    parser.add_argument('--unit', '-u',
                        choices=('s', 'ms', 'us'),
                        default='s',
                        help='output unit of time')
    return parser.parse_args()


def check_args(args):
    if args.output in ('int', 'rfc3339'):
        assert args.timezone is None


def parse_into_timestamp(input: str) -> float:
    if re.match(r'@\d+(\.\d+)?', input) is not None:
        return float(input[1:])
    return parse_date(input).timestamp()


def timezone_or_default(tz_offset):
    if tz_offset is not None:
        return timezone(timedelta(hours=tz_offset))
    return datetime.now().astimezone().tzinfo


def print_formatted_datetime(timestamp: float):
    # Integer timestamps
    if args.output == 'int':
        multiplier = {'s': 1,
                      'ms': 1_000,
                      'us': 1_000_000}[args.unit]
        return print(int(timestamp * multiplier))
    # RFC3339
    elif args.output == 'rfc3339':
        dt = datetime.fromtimestamp(timestamp, UTC)
        timespec = {'s': 'seconds',
                    'ms': 'milliseconds',
                    'us': 'microseconds'}[args.unit]
        return print(dt.isoformat(timespec=timespec) + 'Z')
    # ISO8601
    elif args.output == 'iso8601':
        tz = timezone_or_default(args.timezone)
        dt = datetime.fromtimestamp(timestamp).astimezone(tz)
        timespec = {'s': 'seconds',
                    'ms': 'milliseconds',
                    'us': 'microseconds'}[args.unit]
        return print(dt.isoformat(timespec=timespec))
    # Compact string
    elif args.output == 'compact':
        tz = timezone_or_default(args.timezone)
        dt = datetime.fromtimestamp(timestamp).astimezone(tz)
        timespec = {'s': 'seconds',
                    'ms': 'milliseconds',
                    'us': 'microseconds'}[args.unit]
        return print(dt.strftime('%Y%m%d%H%M%S'))


if __name__ == '__main__':
    args = get_args()
    check_args(args)
    timestamp = parse_into_timestamp(args.input)
    print_formatted_datetime(timestamp)
