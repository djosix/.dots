#!/usr/bin/env python3

import os, sys
import re
import functools
import argparse
import subprocess as sp

username = os.environ.get('USER')
sysname = os.uname().sysname
host = '127.0.0.1'
port = '9050'

assert username is not None, 'cannot get username from env'
assert sysname in ('Linux', 'Darwin'), 'unexpected system'

def get_args():
    ap = argparse.ArgumentParser()
    ap.add_argument('--macos-network-service', '-m', required=False)
    ap.add_argument('--list-macos-networks', '-l', action='store_true')
    ap.add_argument('--ssh-port', '-p', default='22', metavar='SSH_PORT')
    ap.add_argument('ssh_host', metavar='SSH_HOST', nargs='?')
    return ap.parse_args()



def call(*args, sudo=False):
    if username != 'root' and sudo:
        args = ['sudo', *args]
    print('$', *args)
    return sp.call(args)

def macos_get_default_network_service_name():
    output = sp.getoutput('route get example.com')
    matched = re.search(r'(?<=interface: )[^\s]+', output)
    
    assert matched is not None, 'cannot get default network service interface'
    interface = matched.group()
    
    output = sp.getoutput('networksetup -listnetworkserviceorder')
    matched = re.search(r'Hardware Port: (.+?), Device: ' + interface, output)
    
    assert matched is not None, 'cannot get network service name'
    service_name = matched.groups()[0]
    
    return service_name

def clean(args):
    print('cleaning up socks settings')
    if sysname == 'Darwin':
        call('sudo', 'networksetup', '-setsocksfirewallproxy', args.macos_network_service, '', '')
        call('sudo', 'networksetup', '-setsocksfirewallproxystate', args.macos_network_service, 'off')
    elif sysname == 'Linux':
        call('gsettings', 'set', 'org.gnome.system.proxy', 'mode', 'none')
        call('gsettings', 'set', 'org.gnome.system.proxy.socks', 'host', '')
        call('gsettings', 'set', 'org.gnome.system.proxy.socks', 'port', '')


def start(args):
    print('setting up socks proxy')
    if sysname == 'Darwin':
        call('sudo', 'networksetup', '-setsocksfirewallproxy', args.macos_network_service, host, port)
        call('sudo', 'networksetup', '-setsocksfirewallproxystate', args.macos_network_service, 'on')
    elif sysname == 'Linux':
        call('gsettings', 'set', 'org.gnome.system.proxy.socks', 'host', host)
        call('gsettings', 'set', 'org.gnome.system.proxy.socks', 'port', port)
        call('gsettings', 'set', 'org.gnome.system.proxy', 'mode', 'manual')
        
    print('starting connection')
    call('ssh', '-ND', port, args.ssh_host, '-p', args.ssh_port)


if __name__ == '__main__':
    args = get_args()
    
    if args.list_macos_networks:
        assert sysname == 'Darwin', 'this feature is for macOS'
        call('networksetup', '-listnetworkserviceorder')
        sys.exit(0)
    elif args.ssh_host is None:
        executable = os.path.basename(sys.argv[0])
        print('Usage: {} [OPTIONS...] SSH_HOST'.format(executable))
        sys.exit(1)
    
    if args.macos_network_service is None:
        args.macos_network_service = macos_get_default_network_service_name()
        print('default network service:', args.macos_network_service)

    try:
        start(args)
    except:
        print(' (ABORT)')
    finally:
        clean(args)
