#!/bin/bash

set -e

function Print {
    echo "===> $1"
}

function ShowHelp {
    PROGRAM="$(basename $0)"
    echo "Usage: $PROGRAM NAME SUBJ [OPTIONS] [SAN_TYPE:SAN_VALUE] ..."
    echo "Options:"
    echo "  -days DAYS"
    echo "Example:"
    echo "  $ $PROGRAM MySite /CN=example.com DNS:example.com"
    echo "  $ cat MySite.crt RootCA.crt > fullchain.pem"
}

function GenerateRootCA {
    [[ -f RootCA.key ]] || {
        Print RootCA.key
        openssl genrsa -out RootCA.key 4096
        chmod 600 RootCA.key
        Print RootCA.req
        openssl req -new -key RootCA.key -out RootCA.req -subj "${ROOT_SUBJ:-/CN=RootCA}"
    }
    [[ -f RootCA.crt ]] || {
        Print RootCA.crt
        openssl x509 -req -days 3650 -sha256 -extensions v3_ca \
            -signkey RootCA.key -in RootCA.req -out RootCA.crt
        Print RootCA.pem
        cat RootCA.crt RootCA.key > RootCA.pem
        chmod 600 RootCA.pem
    }
    [[ -f RootCA.srl ]] || {
        Print RootCA.srl
        echo 1000 > RootCA.srl
    }
}

function GenerateCert {
    echo "Name: $NAME"
    echo "Days: $DAYS"

    local TEMPFILE=`mktemp`
    PrintSAN >> $TEMPFILE
    local EXTARGS=()
    if [[ `cat $TEMPFILE` ]]; then
        EXTARGS+=('-extfile' "$TEMPFILE")
        echo "Ext: $(cat $TEMPFILE)"
    fi

    (
        set -x

        openssl genrsa -out "$NAME.key" 4096
        chmod 600 "$NAME.key"

        openssl req -new -key "$NAME.key" -out "$NAME.req" -subj "$SUBJ"

        openssl x509 -req \
            -days $DAYS -sha256 \
            -CA RootCA.crt \
            -CAkey RootCA.key \
            -CAserial RootCA.srl \
            -CAcreateserial \
            "${EXTARGS[@]}" \
            -in "$NAME.req" -out "$NAME.crt"
        
        openssl x509 -in "$NAME.crt" -text

        cat "$NAME.crt" "$NAME.key" > "$NAME.pem"
        chmod 600 "$NAME.pem"

        openssl verify -CAfile RootCA.crt -verbose "$NAME.crt"
    )
}

function PrintSAN {
    [[ ${#SAN[@]} == 0 ]] && return
    local LINE='subjectAltName='
    for ITEM in "${SAN[@]}"; do
        LINE="${LINE}${ITEM},"
    done
    echo ${LINE%,}
}


if ! hash openssl 2>/dev/null; then
    echo 'error: openssl command not found'
    exit 1
fi

GenerateRootCA
[[ $# == 0 ]] && exit
[[ $# == 1 ]] && {
    ShowHelp
    exit 1
}

declare NAME="$1"; shift
declare SUBJ="$1"; shift
declare -a SAN=()
declare -i DAYS=397

while (( $# > 0 )); do
    case "$1" in
        DNS:*|IP:*|URI:*|RID:*|email:*|otherName:*|dirName:*)
            SAN+=("$1"); shift
            ;;
        -days|--days)
            DAYS="$2"; shift 2
            ;;
        -h|-help|--help)
            ShowHelp
            exit
            ;;
        *)
            echo "error: unknown argument: $1"; shift
            ShowHelp
            exit 1
            ;;
    esac
done

GenerateCert


exit
# just to backup old scripts

: gencert2 <<EOF
#!/bin/bash

[[ -f root-ca-key.pem ]] || \
    openssl genrsa -out root-ca-key.pem 2048
[[ -f root-ca.pem ]] || \
    openssl req -new -x509 -sha256 -key root-ca-key.pem -out root-ca.pem -days 3650

for name in $@; do
    openssl genrsa -out $name-key-temp.pem 2048
    openssl pkcs8 -inform PEM -outform PEM -in $name-key-temp.pem -topk8 -nocrypt -v1 PBE-SHA1-3DES -out $name-key.pem
    openssl req -new -key $name-key.pem -out $name.csr
    openssl x509 -req -in $name.csr -CA root-ca.pem -CAkey root-ca-key.pem -CAcreateserial -sha256 -out $name.pem -days 730
    rm $name-key-temp.pem $name.csr
done
EOF

: genrsa <<EOF
#!/bin/sh
openssl genrsa -out private.pem $1
openssl rsa -in private.pem -pubout -out public.pem
EOF
