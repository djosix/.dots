#!/bin/bash
# Copyright (c) 2022 Yuankui Lee
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

declare COMMAND
declare INTERVAL
declare -i VERBOSE=0
declare -i KILL=0
declare -a TARGETS=()
declare STATE_CMD='stat -c %n:%Y:%Z'

if [[ `uname` == Darwin ]]; then
    STATE_CMD='stat -f %N:%m:%c'
fi

function get_state_hash {
    { eval $STATE_CMD $@ | sha1sum | cut -d ' ' -f1
    } 2>${STATE_CMD_ERROR_FILE:-/dev/null}
}

function get_date {
    date +'%Y-%m-%d %H:%M:%S'
}

function print_raw {
    if (( VERBOSE )); then
        echo "$@"
    fi
}

function print {
    if (( VERBOSE )); then
        echo "${ECHO_ARGS[@]}" "[$(get_date)] $@"
    fi
}

function print_last_line {
    if (( VERBOSE )); then
        echo -en '\r\033[A'
        print "$@"
    fi
}

function kill_job {
    if [[ $JOB_PID && -e /proc/$JOB_PID ]]; then
        declare -a PIDS
        mapfile -t PIDS <<< "$(ps -o pid= --ppid $JOB_PID)"
        PIDS+=("$JOB_PID")
        echo "[killing "$JOB_PID"]" >&2
        kill -9 ${PIDS[@]} >&/dev/null
        wait >&/dev/null
    fi
}

function show_help {
    PROGRAM="$(basename $0)"
    echo "Usage: $PROGRAM [-c COMMAND] [-s STATE_CMD] [-t INTERVAL] [-v] PATH1 PATH2 ..."
    echo "Description:"
    echo "  This script executes arbitrary command specified by the user"
    echo "  after detecting changes from the given files or directories."
    echo "Options:"
    echo "  -c COMMAND   The command you want to execute when the state changes."
    echo "  -t INTERVAL  The delay interval in seconds between state evaluations."
    echo "  -s STATE_CMD The state command, e.g. md5sum. (defualt: $STATE_CMD)"
    echo "  -v           Show detailed logs."
    echo "Examples:"
    echo "  $ $PROGRAM -c 'g++ -o main main.cpp && ./main' -v main.cpp"
    echo "    # verbose (-v), show details"
    echo "  $ $PROGRAM -c 'g++ -o main main.cpp && ./main' -v -t 5 main.cpp"
    echo "    # compute state hash every 5 seconds (defaults to 1)"
    echo "  $ find . -type f -name '*.cpp' -print0 | xargs -0 $PROGRAM -c make"
    echo "    # fixed watch list (listed by the find command)"
    echo "  $ $PROGRAM -c 'make run' *.cpp *.h Makefile"
    echo "    # fixed watch list (expanded by the shell on start)"
    echo "  $ $PROGRAM -c 'make run' '\$(find . -name \"*.cpp\")' Makefile"
    echo "    # dynamic watch list (listed by the find command every N seconds)"
    echo "  $ $PROGRAM -c 'make run' '*.cpp' '*.h' Makefile"
    echo "    # dynamic watch list (expanded by bash every N seconds)"
    echo "  $ $PROGRAM -c 'make run' -s md5sum '*.cpp' '*.h' Makefile"
    echo "    # watch file content changes rather than modification times"
}

function show_help_and_panic {
    show_help
    exit 1
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--command)
            shift
            [[ $# == 0 ]] && show_help_and_panic
            COMMAND="$1"
            shift
            ;;
        -t|--interval)
            shift
            [[ $# == 0 ]] && show_help_and_panic
            INTERVAL="$1"
            shift
            ;;
        -s|--state)
            shift
            [[ $# == 0 ]] && show_help_and_panic
            STATE_CMD="$1"
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -k|--kill)
            KILL=1
            shift
            ;;
        -h|--help)
            show_help
            exit
            ;;
        -*)
            echo "Error: No such option: $1"
            show_help_and_panic
            ;;
        *)
            TARGETS+=("$1")
            shift
            ;;
    esac
done

[[ -z $COMMAND ]] && COMMAND='echo "!!! STATE CHANGE DETECTED !!!"'
[[ -z $INTERVAL ]] && INTERVAL=1

if [[ ${#TARGETS[@]} == 0 ]]; then
    while read -d $'\n' NAME; do
        TARGETS+=("$NAME")
    done <<< "$(find . -maxdepth 1)"
fi

print "INTERVAL = $INTERVAL"
print "COMMAND = ($COMMAND)"
print "VERBOSE = $VERBOSE"
print "KILL = $KILL"
print "STATE_CMD = ($STATE_CMD)"
print "TARGETS ="
for NAME in "${TARGETS[@]}"; do
    print "    $NAME"
done

if (( KILL )); then
    trap 'kill_job; exit 0' INT TERM
fi

while true; do
    NEW_HASH="$(get_state_hash "${TARGETS[@]}")"
    if [[ $NEW_HASH != $HASH ]]; then
        if (( KILL )); then
            kill_job
            ( eval "$COMMAND" ) &
            JOB_PID="$!"
        else
            ( eval "$COMMAND" )
        fi
        (( VERBOSE )) && echo
    fi
    HASH="$NEW_HASH"
    print_last_line "Watching..."
    sleep "$INTERVAL"
done
