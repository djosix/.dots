#!/bin/bash
# Copyright (c) 2022 Yuankui Lee
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

declare COMMAND
declare INTERVAL
declare -i VERBOSE=0
declare -i KILL=0
declare -a TARGETS=()
declare STATE_CMD

function get_state_hash {
    { eval $STATE_CMD $@ | sha1sum | cut -d ' ' -f1
    } 2>${STATE_CMD_ERROR_FILE:-/dev/null}
}

function get_date {
    date +'%Y-%m-%d %H:%M:%S'
}

function print {
    echo "${ECHO_ARGS[@]}" "[$(get_date)] $@"
}

function print_last_line {
    echo
    echo -en '\r\033[A'
    print "$@"
}

function kill_job {
    if [[ $JOB_PID && -e /proc/$JOB_PID ]]; then
        declare -a PIDS
        mapfile -t PIDS <<< "$(ps -o pid= --ppid $JOB_PID)"
        PIDS+=("$JOB_PID")
        echo "[killing "$JOB_PID"]" >&2
        kill -9 ${PIDS[@]} >&/dev/null
        wait $JOB_PID >&/dev/null
    fi
}

function show_help {
    PROGRAM="$(basename $0)"
    echo "Usage: $PROGRAM [-c COMMAND] [-s STATE_CMD] [-t INTERVAL] [-v] PATH1 PATH2 ..."
    echo "Description:"
    echo "  This script executes arbitrary command specified by the user"
    echo "  after detecting changes from the given files or directories."
    echo "Options:"
    echo "  -c COMMAND   The command you want to execute when the state changes."
    echo "  -t INTERVAL  The delay interval in seconds between state evaluations."
    echo "               If equals to 0, use inotifywait (-s has no effect anymore)."
    echo "  -s STATE_CMD The state command, e.g. md5sum. (defualt: stat)"
    echo "  -k           Kill unfinished command when new state change is detected."
    echo "  -v           Show detailed logs."
    echo "Examples:"
    echo "  $ $PROGRAM -c 'g++ -o main main.cpp && ./main' -v main.cpp"
    echo "    # verbose (-v), show details"
    echo "  $ $PROGRAM -c 'g++ -o main main.cpp && ./main' -v -t 5 main.cpp"
    echo "    # compute state hash every 5 seconds (defaults to 1)"
    echo "  $ find . -type f -name '*.cpp' -print0 | xargs -0 $PROGRAM -c make"
    echo "    # fixed watch list (listed by the find command)"
    echo "  $ $PROGRAM -c 'make run' *.cpp *.h Makefile"
    echo "    # fixed watch list (expanded by the shell on start)"
    echo "  $ $PROGRAM -c 'make run' '\$(find . -name \"*.cpp\")' Makefile"
    echo "    # dynamic watch list (listed by the find command every N seconds)"
    echo "  $ $PROGRAM -c 'make run' '*.cpp' '*.h' Makefile"
    echo "    # dynamic watch list (expanded by bash every N seconds)"
    echo "  $ $PROGRAM -c 'make run' -s md5sum '*.cpp' '*.h' Makefile"
    echo "    # watch file content changes rather than modification times"
    echo "  $ $PROGRAM -t 0 ./"
    echo "    # watch files and directories in ./ using inotifywait"
    echo "    # you must install inotify-tools to use this feature"
}

function show_help_and_panic {
    show_help
    exit 1
}

function is_decimal {
    [[ "$1" =~ ^-?[0-9]*(\.[0-9]+)?$ ]]
}

function polling_watcher {
    local INTERVAL="$1"
    shift
    local TARGETS=("$@")
    shift $#
    local HASH=''
    local NEW_HASH=''
    while true; do
        NEW_HASH="$(get_state_hash "${TARGETS[@]}")"
        [[ $HASH && $NEW_HASH != $HASH ]] && echo 'STATE_CHANGED'
        HASH="$NEW_HASH"
        sleep "$INTERVAL"
    done
}

function inotify_watcher {
    hash inotifywait >& /dev/null || {
        echo 'error: inotifywait not found, please install inotify-tools first' >&2
        exit 1
    }
    eval inotifywait -q -m -e close_write -- "$@"
}

function watch {
    local INTERVAL="$1"
    shift
    if [[ $INTERVAL == 0 ]]; then
        inotify_watcher "$@"
    else
        polling_watcher "$INTERVAL" "$@"
    fi
}

function kill_and_exit {
    stop_running
    kill_job
    exit 0
}

function stop_running {
    DONE=true
}

function debounced_read {
    local FD="${1:-0}"
    local TIME="${2:-0.01}"
    local VAR
    while is_running; do
        read -u $FD -d '' -r -t "$TIME" VAR
        [[ $VAR ]] && return
    done
}

function find_available_fd {
    local FD
    for FD in {3..255}; do
        [[ -e /proc/self/fd/$FD ]] || break
    done
    echo "$FD"
}

function has_cmd {
    hash "$1" >&/dev/null 
}

function is_kill_enabled {
    (( KILL ))
}

function is_verbose {
    (( VERBOSE ))
}

function is_running {
    [[ ${DONE+defined} != defined ]]
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--command)
            shift
            [[ $# == 0 ]] && show_help_and_panic
            COMMAND="$1"
            shift
            ;;
        -t|--interval)
            shift
            [[ $# == 0 ]] && show_help_and_panic
            INTERVAL="$1"
            shift
            ;;
        -s|--state)
            shift
            [[ $# == 0 ]] && show_help_and_panic
            STATE_CMD="$1"
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -k|--kill)
            KILL=1
            shift
            ;;
        -h|--help)
            show_help
            exit
            ;;
        -*)
            echo "error: no such option: $1" >&2
            show_help_and_panic
            ;;
        *)
            TARGETS+=("$1")
            shift
            ;;
    esac
done

if [[ -z $COMMAND ]]; then
    COMMAND='echo "State changed at $(date)"'
fi

if [[ ${#TARGETS[@]} == 0 ]]; then
    if [[ -z $STATE_CMD ]]; then
        if [[ $INTERVAL -eq 0 ]]; then
            echo 'error: watching no files' >&2
        else
            echo 'error: you must specify -s CMD to watch by command' >&2
        fi
        exit 1
    fi
    if [[ -z $INTERVAL ]]; then
        INTERVAL=1
    elif [[ ! $INTERVAL =~ ^[1-9] ]]; then
        echo "error: invalid interval $INTERVAL when no file is provided" >&2
        exit 1
    fi
fi

if [[ -z $INTERVAL ]]; then
    INTERVAL=1
    if [[ -z $STATE_CMD ]] && has_cmd inotifywait; then
        INTERVAL=0
    fi
fi

if (( INTERVAL == 0 )) && [[ $STATE_CMD ]]; then
    echo "warning: STATE_CMD=($STATE_CMD) has no effect when interval equals to 0" >&2
fi

if [[ -z $STATE_CMD ]]; then
    if [[ `uname` == 'Darwin' ]]; then
        STATE_CMD='stat -f %N:%m:%c'
    else
        STATE_CMD='stat -c %n:%Y:%Z'
    fi
fi

if is_kill_enabled; then
    trap kill_and_exit INT TERM
fi

if is_verbose; then
    print "INTERVAL = $INTERVAL"
    print "COMMAND = ($COMMAND)"
    print "VERBOSE = $VERBOSE"
    print "KILL = $KILL"
    print "STATE_CMD = ($STATE_CMD)"
    print "TARGETS ="
    for NAME in "${TARGETS[@]}"; do
        print "    $NAME"
    done
fi

FD=`find_available_fd`
exec {FD}< <(watch "$INTERVAL" "${TARGETS[@]}")
while true; do
    if is_kill_enabled; then
        kill_job
        ( eval "$COMMAND" ) &
        JOB_PID="$!"
    else
        ( eval "$COMMAND" )
    fi
    if is_verbose; then
        print_last_line "Watching..."
    fi
    is_running && debounced_read "$FD" || break
done
