#!/usr/bin/env python3

from argparse import ArgumentParser
from os import walk, stat
from os.path import join, abspath, exists
from contextlib import suppress
from sys import stderr

def get_args():
    parser = ArgumentParser(description='Display the size of a file or directory')
    parser.add_argument('paths', nargs='+', metavar='path', help='path to file or directory')
    parser.add_argument('-n', '--number', action='store_true', help='print only the number of bytes')
    return parser.parse_args()

def print_size_with_unit(size: int):
    precision = 1
    abbrevs = (
        (1 << 50, 'PB'),
        (1 << 40, 'TB'),
        (1 << 30, 'GB'),
        (1 << 20, 'MB'),
        (1 << 10, 'KB'),
        (1, 'bytes')
    )
    if size in (0, 1):
        print(f'{size} byte')
    else:
        for factor, suffix in abbrevs:
            if size >= factor:
                break
        print(f"{size / factor:.{precision}f} {suffix}")

def main():
    args = get_args()

    path_set = set(map(abspath, args.paths))
    file_set, dir_set = set(), set()

    for path in path_set:
        if not exists(path):
            print(f"sizeof: cannot access '{path}': No such file or directory", file=stderr)
            continue
        for root, dirs, files in walk(path):
            file_set |= set(map(lambda f: join(root, f), files))
            dir_set |= set(map(lambda d: join(root, d), dirs))

    total_size = 0
    for path in (path_set | file_set | dir_set):
        with suppress(FileNotFoundError):
            total_size += stat(path, follow_symlinks=False).st_size

    if args.number:
        print(total_size)
    else:
        print_size_with_unit(total_size)

if __name__ == '__main__':
    main()
